/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cashforward.ui.payment;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import java.util.logging.Logger;
import org.cashforward.model.Label;
import org.cashforward.model.Payee;
import org.cashforward.model.Payment;
import org.cashforward.model.PaymentSearchCriteria;
import org.cashforward.ui.UIContext;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;
/**
 * Top component which displays something.
 */
final class PaymentTopComponent extends TopComponent {
   
    private static PaymentTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "PaymentTopComponent";
    
    private Lookup.Result paymentNotifier =
            UIContext.getDefault().lookupResult(Payment.class);
    private Lookup.Result payeeNotifier = 
            UIContext.getDefault().lookupResult(Payee.class);
    private Lookup.Result filterNotifier = 
            UIContext.getDefault().lookupResult(Payment.Occurence.class);
    
    private PaymentTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(PaymentTopComponent.class, "CTL_PaymentTopComponent"));
        setToolTipText(NbBundle.getMessage(PaymentTopComponent.class, "HINT_PaymentTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
        
        
        filterNotifier.addLookupListener(new LookupListener() {
            public void resultChanged(LookupEvent event) {
                Lookup.Result r = (Lookup.Result) event.getSource();
                Collection c = r.allInstances();
                if (!c.isEmpty()) {
                    Payment.Occurence occurence = 
                            (Payment.Occurence) c.iterator().next();
                    if (occurence == Payment.Occurence.NONE)
                        paymentListPanel.setPayments(
                                UIContext.getDefault().getCurrentPayments());
                    else
                        paymentListPanel.setPayments(
                                UIContext.getDefault().getScheduledPayments());
                } 
            }
        });
        
        payeeNotifier.addLookupListener(new LookupListener() {
            public void resultChanged(LookupEvent arg0) {
                paymentDetailPanel.setPayees(UIContext.getDefault().getPayees());
            }
        });
        
        paymentNotifier.addLookupListener(new LookupListener() {

            public void resultChanged(LookupEvent event) {
                Lookup.Result r = (Lookup.Result) event.getSource();
                Collection c = r.allInstances();
                if (!c.isEmpty()) {
                    Payment payment = (Payment) c.iterator().next();
                    System.out.println("setting payment:" + payment);
                    paymentDetailPanel.setPayment(payment);
                }                
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paymentListPanel = new org.cashforward.ui.payment.PaymentListPanel();
        paymentDetailPanel = new org.cashforward.ui.payment.PaymentDetailPanel();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(paymentListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paymentDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paymentListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paymentDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.cashforward.ui.payment.PaymentDetailPanel paymentDetailPanel;
    private org.cashforward.ui.payment.PaymentListPanel paymentListPanel;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized PaymentTopComponent getDefault() {
        if (instance == null) {
            instance = new PaymentTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the PaymentTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized PaymentTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(PaymentTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof PaymentTopComponent) {
            return (PaymentTopComponent) win;
        }
        Logger.getLogger(PaymentTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        paymentListPanel.setPayments(
                UIContext.getDefault().getCurrentPayments());
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return PaymentTopComponent.getDefault();
        }
    }
}
