/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cashforward.ui.payment;

import java.io.Serializable;
import java.util.Collection;
import java.util.logging.Logger;
import org.cashforward.model.Payee;
import org.cashforward.model.Payment;
import org.cashforward.ui.UIContext;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import com.jidesoft.pane.CollapsiblePane;
//import org.openide.util.Utilities;
/**
 * Top component which displays something.
 */
final class PaymentTopComponent extends TopComponent {
   
    private static PaymentTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "PaymentTopComponent";
    
    private Lookup.Result paymentNotifier =
            UIContext.getDefault().lookupResult(Payment.class);
    private Lookup.Result payeeNotifier = 
            UIContext.getDefault().lookupResult(Payee.class);
    private Lookup.Result filterNotifier = 
            UIContext.getDefault().lookupResult(Payment.Occurence.class);
    
    private PaymentTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(PaymentTopComponent.class, "CTL_PaymentTopComponent"));
        setToolTipText(NbBundle.getMessage(PaymentTopComponent.class, "HINT_PaymentTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
        
        paymentDetailPanel.setPayees(UIContext.getDefault().getPayees());
        paymentDetailPanel.setLabels(UIContext.getDefault().getLabels());
        
        filterNotifier.addLookupListener(new LookupListener() {
            public void resultChanged(LookupEvent event) {
                Lookup.Result r = (Lookup.Result) event.getSource();
                Collection c = r.allInstances();
                if (!c.isEmpty()) {
                    Payment.Occurence occurence = 
                            (Payment.Occurence) c.iterator().next();
                    if (occurence == Payment.Occurence.NONE)
                        paymentListPanel.setPayments(
                                UIContext.getDefault().getCurrentPayments());
                    else
                        paymentListPanel.setPayments(
                                UIContext.getDefault().getScheduledPayments());
                } 
            }
        });
        
        payeeNotifier.addLookupListener(new LookupListener() {
            public void resultChanged(LookupEvent arg0) {
                paymentDetailPanel.setPayees(UIContext.getDefault().getPayees());
            }
        });
        
        paymentNotifier.addLookupListener(new LookupListener() {

            public void resultChanged(LookupEvent event) {
                Lookup.Result r = (Lookup.Result) event.getSource();
                Collection c = r.allInstances();
                if (!c.isEmpty()) {
                    Payment payment = (Payment) c.iterator().next();
                    paymentDetailPanel.setPayment(payment);
                }                
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paymentListPanel = new org.cashforward.ui.payment.PaymentListPanel();
        paymentScheduleForm = new org.cashforward.ui.payment.PaymentScheduleForm();
        paymentComposite = new javax.swing.JPanel();
        paymentDetailInnerContainer = new com.jidesoft.pane.CollapsiblePane();
        scheduleDetailContainer = new com.jidesoft.pane.CollapsiblePane();
        paymentDetailPanel = new org.cashforward.ui.payment.PaymentDetailPanel();
        paymentListContainer = new com.jidesoft.pane.CollapsiblePane();
        paymentDetailContainer = new com.jidesoft.pane.CollapsiblePane();

        paymentDetailInnerContainer.setStyle(CollapsiblePane.PLAIN_STYLE);
        paymentDetailInnerContainer.setTitle(org.openide.util.NbBundle.getMessage(PaymentTopComponent.class, "PaymentTopComponent.paymentDetailInnerContainer.title")); // NOI18N

        javax.swing.GroupLayout paymentDetailInnerContainerLayout = new javax.swing.GroupLayout(paymentDetailInnerContainer.getContentPane());
        paymentDetailInnerContainer.getContentPane().setLayout(paymentDetailInnerContainerLayout);
        paymentDetailInnerContainerLayout.setHorizontalGroup(
            paymentDetailInnerContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 251, Short.MAX_VALUE)
        );
        paymentDetailInnerContainerLayout.setVerticalGroup(
            paymentDetailInnerContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 116, Short.MAX_VALUE)
        );

        try {
            scheduleDetailContainer.setCollapsed(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        scheduleDetailContainer.setStyle(CollapsiblePane.PLAIN_STYLE);

        javax.swing.GroupLayout scheduleDetailContainerLayout = new javax.swing.GroupLayout(scheduleDetailContainer.getContentPane());
        scheduleDetailContainer.getContentPane().setLayout(scheduleDetailContainerLayout);
        scheduleDetailContainerLayout.setHorizontalGroup(
            scheduleDetailContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 251, Short.MAX_VALUE)
        );
        scheduleDetailContainerLayout.setVerticalGroup(
            scheduleDetailContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        paymentDetailInnerContainer.setContentAreaFilled(true);
        paymentDetailInnerContainer.setContentPane(paymentDetailPanel);
        scheduleDetailContainer.setContentAreaFilled(true);
        scheduleDetailContainer.setContentPane(paymentScheduleForm);

        javax.swing.GroupLayout paymentCompositeLayout = new javax.swing.GroupLayout(paymentComposite);
        paymentComposite.setLayout(paymentCompositeLayout);
        paymentCompositeLayout.setHorizontalGroup(
            paymentCompositeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paymentDetailInnerContainer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(scheduleDetailContainer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        paymentCompositeLayout.setVerticalGroup(
            paymentCompositeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentCompositeLayout.createSequentialGroup()
                .addComponent(paymentDetailInnerContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scheduleDetailContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paymentListContainer.setShowExpandButton(false);
        paymentListContainer.setShowTitleBar(false);
        paymentListContainer.setStyle(CollapsiblePane.PLAIN_STYLE);
        paymentListContainer.setSlidingDirection(7);

        javax.swing.GroupLayout paymentListContainerLayout = new javax.swing.GroupLayout(paymentListContainer.getContentPane());
        paymentListContainer.getContentPane().setLayout(paymentListContainerLayout);
        paymentListContainerLayout.setHorizontalGroup(
            paymentListContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 255, Short.MAX_VALUE)
        );
        paymentListContainerLayout.setVerticalGroup(
            paymentListContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );

        try {
            paymentDetailContainer.setCollapsed(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        paymentDetailContainer.setStyle(CollapsiblePane.PLAIN_STYLE);
        paymentDetailContainer.setSlidingDirection(7);

        javax.swing.GroupLayout paymentDetailContainerLayout = new javax.swing.GroupLayout(paymentDetailContainer.getContentPane());
        paymentDetailContainer.getContentPane().setLayout(paymentDetailContainerLayout);
        paymentDetailContainerLayout.setHorizontalGroup(
            paymentDetailContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        paymentDetailContainerLayout.setVerticalGroup(
            paymentDetailContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 210, Short.MAX_VALUE)
        );

        paymentListContainer.setSlidingDirection(CollapsiblePane.WEST);
        paymentListContainer.setContentPane(paymentListPanel);
        paymentListContainer.setContentAreaFilled(true);
        paymentDetailContainer.setSlidingDirection(CollapsiblePane.WEST);
        paymentDetailContainer.setContentPane(paymentComposite);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(paymentListContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paymentDetailContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paymentListContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(paymentDetailContainer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel paymentComposite;
    private com.jidesoft.pane.CollapsiblePane paymentDetailContainer;
    private com.jidesoft.pane.CollapsiblePane paymentDetailInnerContainer;
    private org.cashforward.ui.payment.PaymentDetailPanel paymentDetailPanel;
    private com.jidesoft.pane.CollapsiblePane paymentListContainer;
    private org.cashforward.ui.payment.PaymentListPanel paymentListPanel;
    private org.cashforward.ui.payment.PaymentScheduleForm paymentScheduleForm;
    private com.jidesoft.pane.CollapsiblePane scheduleDetailContainer;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized PaymentTopComponent getDefault() {
        if (instance == null) {
            instance = new PaymentTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the PaymentTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized PaymentTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(PaymentTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof PaymentTopComponent) {
            return (PaymentTopComponent) win;
        }
        Logger.getLogger(PaymentTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        paymentListPanel.setPayments(
                UIContext.getDefault().getCurrentPayments());
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return PaymentTopComponent.getDefault();
        }
    }
}
